box: combient/java-mvn
build:
  steps:
    # Build Spring Boot Sample application
    - script:
        name: Maven install
        code: mvn install
push:
  steps:
    # Push to public docker repo
    - internal/docker-push:
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
        tag: latest
        repository: $DOCKER_REPOSITORY
        #registry: https://registry.hub.docker.com
        registry: $DOCKER_REGISTRY
        cmd: java -jar  /pipeline/source/target/springbootdemo-0.0.1.war
push-ocr:
  steps:
    - internal/docker-push:
        tag: ${WERCKER_GIT_COMMIT}
        username: ${DOCKER_USERNAME}
        password: ${DOCKER_PASSWORD}
        repository: ${DOCKER_REPO}:${WERCKER_GIT_COMMIT}
        registry: https://nrt.ocir.io/v2      
        cmd: java -jar  /pipeline/source/target/springbootdemo-0.0.1.war        
deploy-to-oke:
  steps:
    - bash-template

    # The step above should leave us with a Kubernetes service and deployment yml files.
    # We'll create a directory to move them to.
    - script:
        name: Prepare Kubernetes files
        code: |
          mkdir $WERCKER_OUTPUT_DIR/kubernetes
          mv kubernetes_*.yml $WERCKER_OUTPUT_DIR/kubernetes

    # `apply` is a good command to use here, as it'll create Kubernetes entities if they are missing.
    - kubectl:
        name: deploy to kubernetes
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f $WERCKER_OUTPUT_DIR/kubernetes/
deploy-accs:
  steps:
    # Deploy to Oracle Application Container Cloud
    - peternagy/oracle-accs-deploy@1.0.1:
        opc_user: $OPC_USERNAME
        opc_password: $OPC_PASSWORD
        rest_url: $REST_URL
        domain: $IDENTITY_DOMAIN
        application_name: springboot-accs-demo
        application_type: java
        file: springbootdemo-0.0.1.zip
